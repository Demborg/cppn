{"version":3,"sources":["fonts/Roboto/Roboto-Regular.ttf","fonts/Alfa_Slab_One/AlfaSlabOne-Regular.ttf","App.js","serviceWorker.js","index.js"],"names":["module","exports","tflink","cppnlink","TitleCard","this","props","artist","year","name","material","className","React","Component","CPPNCanvas","handleOrientaion","e","x","beta","y","gamma","setState","latent","updateCanvas","console","log","handleClick","targetRect","currentTarget","getBoundingClientRect","nativeEvent","offsetX","width","offsetY","height","state","model","input_size","num_layers","units_per_layer","time","sequential","add","layers","dense","inputShape","units","activation","kernelInitializer","initializers","randomNormal","stddev","i","timeEnd","scale","a","v","u","push","Math","sqrt","map","tensor2d","ctx","refs","canvas","getContext","imageData","createImageData","input","createInput","res_array","predict","batchSize","arraySync","length","c","data","round","putImageData","hidden","createModel","window","addEventListener","ref","onMouseMove","DeviceMotionEvent","requestPermission","onClick","App","href","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d44ea881.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Roboto-Regular.f36638c2.ttf\";","module.exports = __webpack_public_path__ + \"static/media/AlfaSlabOne-Regular.7676beb2.ttf\";","import React from 'react';\nimport './App.css';\nimport '@tensorflow/tfjs'\nimport { sequential, layers, tensor2d, initializers} from '@tensorflow/tfjs';\n\nconst tflink = \"https://www.tensorflow.org/js\"\nconst cppnlink = \"https://en.wikipedia.org/wiki/Compositional_pattern-producing_network\"\nconst channels = 4\n\nclass TitleCard extends React.Component {\n  render () {\n    const {artist, year, name, material} = this.props\n    return (\n      <div className=\"card\">\n        <span className=\"artist\">{artist}</span> <br/>\n        <span className=\"name\">{name}</span> <span className=\"year\">{year}</span> <br/>\n        <span className=\"material\">{material}</span>\n\n      </div>\n    )\n  }\n}\n\nclass CPPNCanvas extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      model : null,\n      latent: [-1, -1]\n    }\n  }\n\n  createModel(input_size, num_layers=2, units_per_layer=8) {\n    console.time('createModel')\n    const model = sequential();\n    model.add(layers.dense({inputShape: [input_size], units: units_per_layer, activation: 'tanh', kernelInitializer: initializers.randomNormal({stddev: 1})}));\n    for (var i = 0; i < num_layers -2; i++){\n      model.add(layers.dense({units: units_per_layer, activation: 'tanh', kernelInitializer: initializers.randomNormal({stddev: 1})}));\n    }\n    model.add(layers.dense({units: channels, activation: 'sigmoid', kernelInitializer: initializers.randomNormal({stddev: 1})}));\n    console.timeEnd('createModel')\n    return model\n  }\n\n  createInput(width, height, latent, scale) {\n    console.time('createInput')\n    var a = []\n    for (var y = 0; y < height; y++) {\n      const v = scale * ((2*y/height)-1)\n      for (var x = 0; x < width; x++) {\n        const u = scale * ((2*x/width)-1)\n        a.push([u, v, Math.sqrt(u*u + v*v), ...latent.map(a => scale*a)])\n      }\n    }\n    console.timeEnd('createInput')\n    return tensor2d(a)\n  }\n\n  updateCanvas() {\n    const {width, height, scale} = this.props\n    const {model, latent} = this.state\n    const canvas = this.refs.canvas\n    const ctx = canvas.getContext(\"2d\")\n    var imageData = ctx.createImageData(width, height)\n    const input = this.createInput(width, height, latent, scale)\n\n    console.time('predict')\n    const res = model.predict(input, {batchSize: 2048})\n    const res_array = res.arraySync()\n    console.timeEnd('predict')\n\n    console.time('paint')\n    for (var i = 0; i < res_array.length; i++) {\n      for (var c = 0; c < channels; c++) {\n        imageData.data[channels * i + c] = Math.round(255 * res_array[i][c])\n      }\n      imageData.data[channels * i + 3] = 255\n    }\n  \n    ctx.putImageData(imageData, 0, 0);\n    console.timeEnd('paint')\n  }\n\n  handleOrientaion = (e) => {\n    const x = e.beta / 180\n    const y = e.gamma / 90\n    this.setState({latent: [x, y]}, this.updateCanvas)\n    console.log(`latent = [${x};${y}]`)\n  }\n\n  componentDidMount() {\n    const {num_layers, hidden} = this.props\n    const model = this.createModel(2+3, num_layers, hidden)\n    this.setState({model: model}, this.updateCanvas)\n    window.addEventListener(\"deviceorientation\", this.handleOrientaion, true)\n  }\n\n  handleClick = (e) => {\n    const targetRect = e.currentTarget.getBoundingClientRect()\n    const x = 2 * (e.nativeEvent.offsetX / targetRect.width) - 1\n    const y = 2 * (e.nativeEvent.offsetY / targetRect.height) - 1\n    this.setState({latent: [x, y]}, this.updateCanvas)\n    console.log(`latent = [${x};${y}]`)\n  }\n\n  render() {\n    return (\n      <div>\n        <canvas \n        ref=\"canvas\"\n        width={this.props.width} \n        height={this.props.height}\n        onMouseMove={DeviceMotionEvent.requestPermission}\n        onClick={this.requestPermission}\n        />\n        <br/>\n        <TitleCard artist=\"Axel Demborg\" year=\"2019\" material=\"Digital render, programming, mixed languages\" name=\"Art of a Machine\"/>\n      </div>\n      \n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div>\n      <h1>CPPN.js</h1>\n      <p>\n        Playing with <a href={cppnlink}> CPPNs </a> and <a href={tflink}>tf.js</a> during hackathon\n      </p>\n      <CPPNCanvas width={256} height={256} scale={8} num_layers={6} units_per_layer={8}/>\n    </div>\n  )  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './fonts/Roboto/Roboto-Regular.ttf'\nimport './fonts/Alfa_Slab_One/AlfaSlabOne-Regular.ttf'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}