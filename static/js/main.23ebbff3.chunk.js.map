{"version":3,"sources":["fonts/Roboto/Roboto-Regular.ttf","fonts/Alfa_Slab_One/AlfaSlabOne-Regular.ttf","App.js","serviceWorker.js","index.js"],"names":["module","exports","tflink","cppnlink","TitleCard","this","props","artist","year","name","material","className","React","Component","CPPNCanvas","handleOrientaion","e","x","beta","y","gamma","setState","latent","updateCanvas","console","log","handleClick","targetRect","currentTarget","getBoundingClientRect","nativeEvent","offsetX","width","offsetY","height","hash","window","location","JSON","parse","slice","state","model","input_size","num_layers","units_per_layer","time","seed","search","crypto","randomUUID","Math","seedrandom","sequential","add","layers","dense","inputShape","units","activation","kernelInitializer","initializers","randomNormal","stddev","i","timeEnd","scale","a","v","u","push","sqrt","map","tensor2d","ctx","refs","canvas","getContext","imageData","createImageData","input","createInput","stringify","res_array","predict","batchSize","arraySync","length","c","data","round","putImageData","hidden","createModel","addEventListener","ref","onMouseMove","App","URLSearchParams","get","href","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23ebbff3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Roboto-Regular.f36638c2.ttf\";","module.exports = __webpack_public_path__ + \"static/media/AlfaSlabOne-Regular.7676beb2.ttf\";","import React from 'react';\nimport './App.css';\nimport '@tensorflow/tfjs'\nimport { sequential, layers, tensor2d, initializers } from '@tensorflow/tfjs';\n\nconst tflink = \"https://www.tensorflow.org/js\"\nconst cppnlink = \"https://en.wikipedia.org/wiki/Compositional_pattern-producing_network\"\nconst channels = 4\n\nclass TitleCard extends React.Component {\n  render () {\n    const {artist, year, name, material} = this.props\n    return (\n      <div className=\"card\">\n        <span className=\"artist\">{artist}</span> <br/>\n        <span className=\"name\">{name}</span> <span className=\"year\">{year}</span> <br/>\n        <span className=\"material\">{material}</span>\n\n      </div>\n    )\n  }\n}\n\nclass CPPNCanvas extends React.Component {\n  constructor(props) {\n    super(props)\n\n    const hash = window.location.hash\n    let x = -1\n    let y = -1\n    if (hash) {\n      console.log(hash)\n      const latent = JSON.parse(window.location.hash.slice(1))\n      x = latent[0]\n      y = latent[1]\n    }\n    this.state = {\n      model : null,\n      latent: [x, y]\n    }\n  }\n\n  createModel(input_size, num_layers=2, units_per_layer=8) {\n    console.time('createModel')\n    let seed = window.location.search.slice(1)\n    if (seed === \"\") {\n      const seed = crypto.randomUUID()\n      window.location.search = seed\n    }\n    Math.seedrandom(seed)\n    const model = sequential();\n    model.add(layers.dense({inputShape: [input_size], units: units_per_layer, activation: 'tanh', kernelInitializer: initializers.randomNormal({stddev: 1})}));\n    for (var i = 0; i < num_layers -2; i++){\n      model.add(layers.dense({units: units_per_layer, activation: 'tanh', kernelInitializer: initializers.randomNormal({stddev: 1})}));\n    }\n    model.add(layers.dense({units: channels, activation: 'sigmoid', kernelInitializer: initializers.randomNormal({stddev: 1})}));\n    console.timeEnd('createModel')\n    return model\n  }\n\n  createInput(width, height, latent, scale) {\n    console.time('createInput')\n    var a = []\n    for (var y = 0; y < height; y++) {\n      const v = scale * ((2*y/height)-1)\n      for (var x = 0; x < width; x++) {\n        const u = scale * ((2*x/width)-1)\n        a.push([u, v, Math.sqrt(u*u + v*v), ...latent.map(a => scale*a)])\n      }\n    }\n    console.timeEnd('createInput')\n    return tensor2d(a)\n  }\n\n  updateCanvas() {\n    const {width, height, scale} = this.props\n    const {model, latent} = this.state\n    const canvas = this.refs.canvas\n    const ctx = canvas.getContext(\"2d\")\n    var imageData = ctx.createImageData(width, height)\n    const input = this.createInput(width, height, latent, scale)\n\n    window.location.hash = JSON.stringify(latent)\n\n    console.time('predict')\n    const res = model.predict(input, {batchSize: 2048})\n    const res_array = res.arraySync()\n    console.timeEnd('predict')\n\n    console.time('paint')\n    for (var i = 0; i < res_array.length; i++) {\n      for (var c = 0; c < channels; c++) {\n        imageData.data[channels * i + c] = Math.round(255 * res_array[i][c])\n      }\n      imageData.data[channels * i + 3] = 255\n    }\n  \n    ctx.putImageData(imageData, 0, 0);\n    console.timeEnd('paint')\n  }\n\n  handleOrientaion = (e) => {\n    const x = e.beta / 90\n    const y = e.gamma / 90\n    this.setState({latent: [x, y]}, this.updateCanvas)\n    console.log(`latent = [${x};${y}]`)\n  }\n\n  componentDidMount() {\n    const {num_layers, hidden} = this.props\n    const model = this.createModel(2+3, num_layers, hidden)\n    this.setState({model: model}, this.updateCanvas)\n    window.addEventListener(\"deviceorientation\", this.handleOrientaion, true)\n  }\n\n  handleClick = (e) => {\n    const targetRect = e.currentTarget.getBoundingClientRect()\n    const x = 2 * (e.nativeEvent.offsetX / targetRect.width) - 1\n    const y = 2 * (e.nativeEvent.offsetY / targetRect.height) - 1\n    this.setState({latent: [x, y]}, this.updateCanvas)\n    console.log(`latent = [${x};${y}]`)\n  }\n\n  render() {\n    return (\n      <canvas \n      ref=\"canvas\"\n      width={this.props.width} \n      height={this.props.height}\n      onMouseMove={this.handleClick}\n      className={this.props.className}\n      />\n    );\n  }\n}\n\nfunction App() {\n  const params = new URLSearchParams(window.location.search)\n  if (params.get(\"fullscreen\")) {\n    return <CPPNCanvas width={256} height={256} scale={8} num_layers={6} units_per_layer={8} className='fullscreen'/>\n  }\n  return (\n    <div>\n      <h1>CPPN.js</h1>\n      <p>\n        Playing with <a href={cppnlink}> CPPNs </a> and <a href={tflink}>tf.js</a> during hackathon\n      </p>\n      <CPPNCanvas width={256} height={256} scale={8} num_layers={6} units_per_layer={8} className='display'/>\n      <TitleCard artist=\"Axel Demborg\" year=\"2019\" material=\"Digital render, programming, mixed languages\" name=\"Art of a Machine\"/>\n    </div>\n  )  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './fonts/Roboto/Roboto-Regular.ttf'\nimport './fonts/Alfa_Slab_One/AlfaSlabOne-Regular.ttf'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}