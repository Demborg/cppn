{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["tflink","cppnlink","CPPNCanvas","props","state","model","input_size","sequential","add","layers","dense","inputShape","units","activation","kernelInitializer","initializers","randomNormal","stddev","width","height","latent","scale","a","y","v","x","u","push","Math","sqrt","map","tensor2d","this","num_layers","hidden","console","log","createModel","setState","ctx","refs","canvas","getContext","imageData","createImageData","input","createInput","res_array","predict","arraySync","i","length","c","data","round","putImageData","ref","React","Component","App","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.323318a2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport '@tensorflow/tfjs'\nimport { sequential, layers, tensor2d, initializers} from '@tensorflow/tfjs';\n\nconst tflink = \"https://www.tensorflow.org/js\"\nconst cppnlink = \"https://en.wikipedia.org/wiki/Compositional_pattern-producing_network\"\nconst channels = 4\n\nclass CPPNCanvas extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { model : null}\n  }\n\n  createModel(input_size) {\n    const model = sequential();\n    model.add(layers.dense({inputShape: [input_size], units: 8, activation: 'tanh', kernelInitializer: initializers.randomNormal({stddev: 1})}));\n    model.add(layers.dense({units: 8, activation: 'tanh', kernelInitializer: initializers.randomNormal({stddev: 1})}));\n    model.add(layers.dense({units: 8, activation: 'tanh', kernelInitializer: initializers.randomNormal({stddev: 1})}));\n    model.add(layers.dense({units: 8, activation: 'tanh', kernelInitializer: initializers.randomNormal({stddev: 1})}));\n    model.add(layers.dense({units: 8, activation: 'tanh', kernelInitializer: initializers.randomNormal({stddev: 1})}));\n    model.add(layers.dense({units: channels, activation: 'sigmoid', kernelInitializer: initializers.randomNormal({stddev: 1})}));\n    return model\n  }\n\n  createInput(width, height, latent, scale) {\n    var a = []\n    for (var y = 0; y < height; y++) {\n      const v = scale * ((2*y/height)-1)\n      for (var x = 0; x < width; x++) {\n        const u = scale * ((2*x/width)-1)\n        a.push([u, v, Math.sqrt(u*u + v*v), ...latent.map(a => scale*a)])\n      }\n    }\n    return tensor2d(a)\n  }\n\n  componentDidMount() {\n    const {num_layers, hidden, width, height, scale} = this.props\n\n    \n    console.log('creating model')\n    const model = this.createModel(2+3, num_layers, hidden)\n    this.setState({model: model})\n    const canvas = this.refs.canvas\n    const ctx = canvas.getContext(\"2d\")\n    var imageData = ctx.createImageData(width, height)\n    const input = this.createInput(width, height, [1, -1], scale)\n\n    const res = model.predict(input)\n    const res_array = res.arraySync()\n\n    for (var i = 0; i < res_array.length; i++) {\n      for (var c = 0; c < channels; c++) {\n        imageData.data[channels * i + c] = Math.round(255 * res_array[i][c])\n      }\n    }\n  \n    ctx.putImageData(imageData, 0, 0);\n  }\n\n  render() {\n    return (\n      <div>\n        <canvas \n        ref=\"canvas\"\n        width={this.props.width} \n        height={this.props.height}\n        />\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div>\n      <h1>CPPN.js</h1>\n      <p>\n        Playing with <a href={cppnlink}> CPPNs </a> and <a href={tflink}>tf.js</a> during hackathon\n      </p>\n      <CPPNCanvas width={256} height={256} scale={8}/>\n    </div>\n  )  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}